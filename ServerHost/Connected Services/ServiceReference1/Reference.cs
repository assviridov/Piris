//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServerHost.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="store_users", Namespace="http://schemas.datacontract.org/2004/07/DomainService.DbContext")]
    [System.SerializableAttribute()]
    public partial class store_users : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userPasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userNameField, value) != true)) {
                    this.userNameField = value;
                    this.RaisePropertyChanged("userName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userPassword {
            get {
                return this.userPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.userPasswordField, value) != true)) {
                    this.userPasswordField = value;
                    this.RaisePropertyChanged("userPassword");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAuthService")]
    public interface IAuthService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthService/UserRegistration", ReplyAction="http://tempuri.org/IAuthService/UserRegistrationResponse")]
        bool UserRegistration(ServerHost.ServiceReference1.store_users userObj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthService/UserRegistration", ReplyAction="http://tempuri.org/IAuthService/UserRegistrationResponse")]
        System.Threading.Tasks.Task<bool> UserRegistrationAsync(ServerHost.ServiceReference1.store_users userObj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthService/UserAuth", ReplyAction="http://tempuri.org/IAuthService/UserAuthResponse")]
        bool UserAuth(ServerHost.ServiceReference1.store_users userObj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthService/UserAuth", ReplyAction="http://tempuri.org/IAuthService/UserAuthResponse")]
        System.Threading.Tasks.Task<bool> UserAuthAsync(ServerHost.ServiceReference1.store_users userObj);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthServiceChannel : ServerHost.ServiceReference1.IAuthService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthServiceClient : System.ServiceModel.ClientBase<ServerHost.ServiceReference1.IAuthService>, ServerHost.ServiceReference1.IAuthService {
        
        public AuthServiceClient() {
        }
        
        public AuthServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool UserRegistration(ServerHost.ServiceReference1.store_users userObj) {
            return base.Channel.UserRegistration(userObj);
        }
        
        public System.Threading.Tasks.Task<bool> UserRegistrationAsync(ServerHost.ServiceReference1.store_users userObj) {
            return base.Channel.UserRegistrationAsync(userObj);
        }
        
        public bool UserAuth(ServerHost.ServiceReference1.store_users userObj) {
            return base.Channel.UserAuth(userObj);
        }
        
        public System.Threading.Tasks.Task<bool> UserAuthAsync(ServerHost.ServiceReference1.store_users userObj) {
            return base.Channel.UserAuthAsync(userObj);
        }
    }
}
