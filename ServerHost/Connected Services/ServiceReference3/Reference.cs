//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServerHost.ServiceReference3 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference3.IDatabaseService")]
    public interface IDatabaseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetPositions", ReplyAction="http://tempuri.org/IDatabaseService/GetPositionsResponse")]
        DomainService.DbContext.store_positions[] GetPositions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetPositions", ReplyAction="http://tempuri.org/IDatabaseService/GetPositionsResponse")]
        System.Threading.Tasks.Task<DomainService.DbContext.store_positions[]> GetPositionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/AddPosition", ReplyAction="http://tempuri.org/IDatabaseService/AddPositionResponse")]
        bool AddPosition(DomainService.DbContext.store_positions position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/AddPosition", ReplyAction="http://tempuri.org/IDatabaseService/AddPositionResponse")]
        System.Threading.Tasks.Task<bool> AddPositionAsync(DomainService.DbContext.store_positions position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetPositionById", ReplyAction="http://tempuri.org/IDatabaseService/GetPositionByIdResponse")]
        DomainService.DbContext.store_positions GetPositionById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetPositionById", ReplyAction="http://tempuri.org/IDatabaseService/GetPositionByIdResponse")]
        System.Threading.Tasks.Task<DomainService.DbContext.store_positions> GetPositionByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetUserByUserName", ReplyAction="http://tempuri.org/IDatabaseService/GetUserByUserNameResponse")]
        DomainService.DbContext.store_users GetUserByUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetUserByUserName", ReplyAction="http://tempuri.org/IDatabaseService/GetUserByUserNameResponse")]
        System.Threading.Tasks.Task<DomainService.DbContext.store_users> GetUserByUserNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/UpdatePosition", ReplyAction="http://tempuri.org/IDatabaseService/UpdatePositionResponse")]
        DomainService.DbContext.store_positions UpdatePosition(DomainService.DbContext.store_positions position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/UpdatePosition", ReplyAction="http://tempuri.org/IDatabaseService/UpdatePositionResponse")]
        System.Threading.Tasks.Task<DomainService.DbContext.store_positions> UpdatePositionAsync(DomainService.DbContext.store_positions position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/DeletePosition", ReplyAction="http://tempuri.org/IDatabaseService/DeletePositionResponse")]
        bool DeletePosition(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/DeletePosition", ReplyAction="http://tempuri.org/IDatabaseService/DeletePositionResponse")]
        System.Threading.Tasks.Task<bool> DeletePositionAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/CreateUser", ReplyAction="http://tempuri.org/IDatabaseService/CreateUserResponse")]
        bool CreateUser(DomainService.DbContext.store_users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/CreateUser", ReplyAction="http://tempuri.org/IDatabaseService/CreateUserResponse")]
        System.Threading.Tasks.Task<bool> CreateUserAsync(DomainService.DbContext.store_users user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseServiceChannel : ServerHost.ServiceReference3.IDatabaseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseServiceClient : System.ServiceModel.ClientBase<ServerHost.ServiceReference3.IDatabaseService>, ServerHost.ServiceReference3.IDatabaseService {
        
        public DatabaseServiceClient() {
        }
        
        public DatabaseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DomainService.DbContext.store_positions[] GetPositions() {
            return base.Channel.GetPositions();
        }
        
        public System.Threading.Tasks.Task<DomainService.DbContext.store_positions[]> GetPositionsAsync() {
            return base.Channel.GetPositionsAsync();
        }
        
        public bool AddPosition(DomainService.DbContext.store_positions position) {
            return base.Channel.AddPosition(position);
        }
        
        public System.Threading.Tasks.Task<bool> AddPositionAsync(DomainService.DbContext.store_positions position) {
            return base.Channel.AddPositionAsync(position);
        }
        
        public DomainService.DbContext.store_positions GetPositionById(int id) {
            return base.Channel.GetPositionById(id);
        }
        
        public System.Threading.Tasks.Task<DomainService.DbContext.store_positions> GetPositionByIdAsync(int id) {
            return base.Channel.GetPositionByIdAsync(id);
        }
        
        public DomainService.DbContext.store_users GetUserByUserName(string userName) {
            return base.Channel.GetUserByUserName(userName);
        }
        
        public System.Threading.Tasks.Task<DomainService.DbContext.store_users> GetUserByUserNameAsync(string userName) {
            return base.Channel.GetUserByUserNameAsync(userName);
        }
        
        public DomainService.DbContext.store_positions UpdatePosition(DomainService.DbContext.store_positions position) {
            return base.Channel.UpdatePosition(position);
        }
        
        public System.Threading.Tasks.Task<DomainService.DbContext.store_positions> UpdatePositionAsync(DomainService.DbContext.store_positions position) {
            return base.Channel.UpdatePositionAsync(position);
        }
        
        public bool DeletePosition(int id) {
            return base.Channel.DeletePosition(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePositionAsync(int id) {
            return base.Channel.DeletePositionAsync(id);
        }
        
        public bool CreateUser(DomainService.DbContext.store_users user) {
            return base.Channel.CreateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> CreateUserAsync(DomainService.DbContext.store_users user) {
            return base.Channel.CreateUserAsync(user);
        }
    }
}
