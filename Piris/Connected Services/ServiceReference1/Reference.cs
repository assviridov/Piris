//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Piris.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConverterObject", Namespace="http://schemas.datacontract.org/2004/07/DomainService.Objects")]
    [System.SerializableAttribute()]
    public partial class ConverterObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string currencyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double currencyValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string requestResField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string currencyName {
            get {
                return this.currencyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.currencyNameField, value) != true)) {
                    this.currencyNameField = value;
                    this.RaisePropertyChanged("currencyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double currencyValue {
            get {
                return this.currencyValueField;
            }
            set {
                if ((this.currencyValueField.Equals(value) != true)) {
                    this.currencyValueField = value;
                    this.RaisePropertyChanged("currencyValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string requestRes {
            get {
                return this.requestResField;
            }
            set {
                if ((object.ReferenceEquals(this.requestResField, value) != true)) {
                    this.requestResField = value;
                    this.RaisePropertyChanged("requestRes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICentralBankService")]
    public interface ICentralBankService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICentralBankService/ConvertValue", ReplyAction="http://tempuri.org/ICentralBankService/ConvertValueResponse")]
        Piris.ServiceReference1.ConverterObject ConvertValue(double value, string currencyValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICentralBankService/ConvertValue", ReplyAction="http://tempuri.org/ICentralBankService/ConvertValueResponse")]
        System.Threading.Tasks.Task<Piris.ServiceReference1.ConverterObject> ConvertValueAsync(double value, string currencyValue);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICentralBankServiceChannel : Piris.ServiceReference1.ICentralBankService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CentralBankServiceClient : System.ServiceModel.ClientBase<Piris.ServiceReference1.ICentralBankService>, Piris.ServiceReference1.ICentralBankService {
        
        public CentralBankServiceClient() {
        }
        
        public CentralBankServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CentralBankServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CentralBankServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CentralBankServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Piris.ServiceReference1.ConverterObject ConvertValue(double value, string currencyValue) {
            return base.Channel.ConvertValue(value, currencyValue);
        }
        
        public System.Threading.Tasks.Task<Piris.ServiceReference1.ConverterObject> ConvertValueAsync(double value, string currencyValue) {
            return base.Channel.ConvertValueAsync(value, currencyValue);
        }
    }
}
